syntax = "proto2";
package hw.trezor.messages.zcash;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageZcash";

/**
 * Request: Universal Zcash protocol implementation diagnosis request.
 * @start
 * @next DebugZcashDiagResponse
 */
message DebugZcashDiagRequest {
    optional bytes ins = 1;
    optional bytes data = 2;
}

/**
 * Response: Response to Monero diagnosis protocol.
 * @end
 */
message DebugZcashDiagResponse {
    optional bytes data = 1;
}

/**
 * Request: Ask device for Full Viewing Key.
 * @start
 * @next Failure
 * @next ZcashFullViewingKey
 */
message ZcashGetFullViewingKey {
    repeated uint32 z_address_n = 2; // z-address ZIP 32 path    
}

/**
 * Response: Contains raw Zcash Orchard Full Viewing Key.
 * @end
 */
message ZcashFullViewingKey {
    required bytes fvk = 1;
}

/**
 * Request: Ask device for Incoming Viewing Key.
 * @start
 * @next Failure
 * @next ZcashIncomingViewingKey
 */
message ZcashGetIncomingViewingKey {
    repeated uint32 z_address_n = 2; // z-address ZIP 32 path    
}

/**
 * Response: Contains raw Zcash Orchard Incoming Viewing Key.
 * @end
 */
message ZcashIncomingViewingKey {
    required bytes ivk = 1;
}

/**
 * Request: Ask device for Unified Address.
 * @start
 * @next Failure
 * @next ZcashAddress
 */
message ZcashGetAddress {
    repeated uint32 t_address_n = 1;                      // t-address BIP 32 path (P2PKH)
    repeated uint32 z_address_n = 2;                      // z-address ZIP 32 path (Orchard)   
    optional uint64 diversifier_index = 3 [default = 0];  // z-address diversifier index
    optional bool   show_display = 4 [default = false];   // Optionally show on display before sending the result
}

/**
 * Response: Contains Zcash diversified payment address derived from device private seed
 * @end
 */
message ZcashAddress {
    optional string address = 1;
}

message ZcashSpendInfo {
    repeated uint32 z_address_n = 1; // to derive fvk 
    required uint64 value = 2;
    required bytes nullifier = 3;
    required bytes rseed = 4;
}

message ZcashOutputInfo {
    optional bool ovk_flag = 1;
    optional string address = 2; // for outgoing transfers
    repeated uint32 z_address_n = 3; // for internal transfers
    required uint64 amount = 4;
    optional bytes memo = 5;
}

message ZcashPushAction {
    optional ZcashSpendInfo spend_info = 1;
    optional ZcashOutputInfo output_info = 2;    
}

/*message ZcashShieldedAction {
    required bytes cv = 1;
    required bytes nullifier = 2;
    required bytes rk = 3;
    required bytes cmx = 4;
    required bytes ephemeral_key = 5;
    required bytes enc_ciphertext = 6;
    required bytes out_ciphertext = 7;
    required bytes ak = 8;
    required bytes alpha = 9;
}*/

message ZcashAck {}

/*
message ZcashGetBindingSignature {

}

message ZcashBindingSignature {
    required bytes binding_sig = 1;
}

message ZcashGetSpendAuthorizingSignature {
    repeated uint32 z_address_n = 1;
}

message ZcashSpendAuthorizingSignature {
    required bytes spend_auth_sig = 1;
}
*/